def bubbleSort(arr): 
    n = len(arr) 
   
    # Traverse through all array elements 
    for i in range(n): 
        swapped = False
  
        # Last i elements are already 
        #  in place 
        for j in range(0, n-i-1): 
   
            # traverse the array from 0 to 
            # n-i-1. Swap if the element  
            # found is greater than the 
            # next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
                swapped = True
  
        # IF no two elements were swapped 
        # by inner loop, then break 
        if swapped == False: 
            break
           
# Driver code to test above 
arr = [976, 11, 13, 5, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,1] 
   
bubbleSort(arr) 
   
print ("Sorted array :") 
for i in range(len(arr)): 
    print ("%d" %arr[i],end=" ")

'''
def insertionSort(arr): 
  
    # Traverse through 1 to len(arr) 
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  

# Driver code to test above 
arr = [12, 11, 13, 5, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,1]
insertionSort(arr) 
print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i])



# Python program for implementation of Quicksort Sort 
  
# This function takes last element as pivot, places 
# the pivot element at its correct position in sorted 
# array, and places all smaller (smaller than pivot) 
# to left of pivot and all greater elements to right 
# of pivot 
  
  
def partition(arr, low, high): 
    i = (low-1)         # index of smaller element 
    pivot = arr[high]     # pivot 
  
    for j in range(low, high): 
  
        # If current element is smaller than or 
        # equal to pivot 
        if arr[j] <= pivot: 
  
            # increment index of smaller element 
            i = i+1
            arr[i], arr[j] = arr[j], arr[i] 
  
    arr[i+1], arr[high] = arr[high], arr[i+1] 
    return (i+1) 
  
# The main function that implements QuickSort 
# arr[] --> Array to be sorted, 
# low  --> Starting index, 
# high  --> Ending index 
  
# Function to do Quick sort 
  
  
def quickSort(arr, low, high): 
    if len(arr) == 1: 
        return arr 
    if low < high: 
  
        # pi is partitioning index, arr[p] is now 
        # at right place 
        pi = partition(arr, low, high) 
  
        # Separately sort elements before 
        # partition and after partition 
        quickSort(arr, low, pi-1) 
        quickSort(arr, pi+1, high) 
  
  
# Driver code to test above 
arr = [12, 11, 13, 5, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,15, 6,3,534,23,45,235,435,234,345,234,2143,345,23,1,43,23,4123,45,234,235,234,235,23412,1]
n = len(arr) 
quickSort(arr, 0, n-1) 
print("Sorted array is:") 
for i in range(n): 
    print("%d" % arr[i]), 
'''